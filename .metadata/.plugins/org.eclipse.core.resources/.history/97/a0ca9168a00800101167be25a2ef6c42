package ejemploBD.dao;

import java.util.List;

import ejemploBD.excepciones.BDException;
import ejemploBD.modelo.Departamento;
import ejemploBD.modelo.Empleado;
import entrada.Teclado;

public class Principal {

	public static void escribirMenuOpciones() {
		System.out.println("0) Salir del programa.");
		System.out.println("1) Consultar el departamento por ubicacion");
		System.out.println("2) Consultar empleado por salario");
		System.out.println("3) Borrar un departamento por código");
		System.out.println("4) Modificar ubicacion de un departamento");
		System.out.println("5) Consultar departamento por codigo");
		System.out.println("6) Agregar departamento");
		System.out.println("7) Cambiar departamento a un empleado");
		System.out.println("8) Consultar informaticos en la empresa");


	}

	public static void main(String[] args) {

		boolean exit = false;

		while (!exit) {
			escribirMenuOpciones();

			int opcion = Teclado.leerEntero("Opción: ");
			try {
				switch (opcion) {

				case 0:
					exit = true;
					System.out.println("Saliendo del programa...");
					break;

				case 1:
					// Consulta los departamentos de la base de datos con la misma ubicación1 y
					// ordenados por nombre de forma ascendente.

					String ubicacion = Teclado.leerCadena("Ubicación? ");
					List<Departamento> departamentos;
					departamentos = AccesoDepartamento.consultarDepartamentos2(ubicacion);

					if (departamentos.size() == 0) {
						System.out.println(
								"No se ha encontrado ningún departamento con esa ubicación en la base de datos.");
					} else {
						for (Departamento departamento : departamentos) {
							System.out.println(departamento.toString());
						}
						System.out.println(
								"Se han consultado " + departamentos.size() + " departamentos de la base de datos.");
					}
					break;

				// Modificar la ubicación de un departamento
				case 2:

					float salario = (float) Teclado.leerReal("Salario? ");
					List<Empleado> empleados;
					empleados = AccesoEmpleado.consultarEmpleadosSalario(salario);

					if (empleados.size() == 0) {
						System.out
								.println("No se ha encontrado ningún empleado con esa ubicación en la base de datos.");
					} else {
						for (Empleado empleado : empleados) {
							System.out.println(empleado.toString());
						}
						System.out.println("Se han consultado " + empleados.size() + " empleado de la base de datos.");
					}
					break;
				case 3:
					int codigo = Teclado.leerEntero("Codigo? ");
					boolean departamento;
					departamento = AccesoDepartamento.eliminarDepartamento(codigo);

					if (departamento) {
						System.out.println("Se ha eliminado correctamento");
					} else {
						System.out.println("No se ha encontrado el departamento");
					}

					break;
				// Borrar un departamento por código

				case 4:
					// "4) Modificar ubicacion de un departamento
					break;
				case 5:
					// 5) Consultar departamento por codigo
					break;
				case 6:
					// agregar departamento
					break;
				case 7:
					int codigoEmpleado = Teclado.leerEntero("Codigo del empleado? ");
					int codigoNuevoD = Teclado.leerEntero("Codigo del departamento nuevo? ");

					boolean empleado;
					empleado = AccesoEmpleado.cambiarDepartamentoEmpleado(codigoEmpleado, codigoNuevoD);

					if (!empleado) {
						System.out.println("No se ha encontrado ningún empleado con ese codigo en la base de datos.");
					} else {
						System.out.println("Se ha cambiado correctamento");
					}
					break;
				case 8:
					List<Empleado> empleados2;
					empleados2 = AccesoEmpleado.consultarInformaticosEmpleados();
					if (empleados2.isEmpty()) {
						System.out.println("No se ha encontrado ningun empleado");
					} else {
						System.out.println(empleados2);
					}
					break;
				}
				
			} catch (BDException e) {
				System.out.println(e.getMessage());
			}
		}

	}
}